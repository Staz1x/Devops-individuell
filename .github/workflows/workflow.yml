---
name: Java CI and Dockerfile Validation
on:
  - push

jobs:
  build:
    runs-on: ubuntu-latest
    environment: env
    env:
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
      SS_USER: ${{ vars.SS_USER }}
      SS_PASSWORD: ${{ vars.SS_PASSWORD }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@ccb4328a959376b642e027874838f60f8e596de3

      - name: Make Gradlew Executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@749f47bda3e44aa060e82d7b3ef7e40d953bd629

      - name: bootJar
        run: |
          ./gradlew bootJar

      - name: Upload Jar
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: build/libs/workflow-dockerimage-actions-0.0.1-SNAPSHOT.jar

  run-tests:
    runs-on: ubuntu-latest
    needs: 
      - build
      - validate-compose
    environment: env
    env:
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
      SS_USER: ${{ vars.SS_USER }}
      SS_PASSWORD: ${{ vars.SS_PASSWORD }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
      
      - name: Make Gradlew Executable
        run: chmod +x ./gradlew  
      
      - name: get jar
        uses: actions/download-artifact@v3
        with:
          name: app
      
      - name: run-app
        run: |
          java -jar workflow-dockerimage-actions-0.0.1-SNAPSHOT.jar &

      - name: test-new-task
        run: |
          ./gradlew test

      - name: Run all tests
        run: |
          ./gradlew systemTesting
          
      
  validate-compose:
    runs-on: ubuntu-latest
    environment: env
    env:
      DB_USER: ${{ vars.DB_USER }}
      DB_PASSWORD: ${{ vars.DB_PASSWORD }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Set environment variables for Docker Compose
        run: |
          echo "DB_USER=${DB_USER}" >> .env
          echo "DB_PASSWORD=${DB_PASSWORD}" >> .env
      - name: Validate Docker Compose Configuration
        run: |
          docker-compose -f docker-compose.yml config --quiet
  
  dockerize:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    needs: 
      - run-tests

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download JAR Artifact
        uses: actions/download-artifact@v3
        with:
          name: app
          path: build/libs

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize

    steps:
      - name: Deploy Your Application
        run: |
          echo "This is a message from the workflow task."


